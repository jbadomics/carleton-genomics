{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nIn this lesson you will connect to an \nAmazon EC2\n cloud computing instance to annotate a bacterial genome, and then mine the annotation to learn interesting things about the biology of the organism. You will work with a partner, but each student will use his/her own remote computer.\n\n\nLearning objectives\n\n\nAt the end of today's lesson, students will understand:\n\n\n\n\nfoundational Unix shell commands (\nls\n, \npwd\n, \nless\n, \ngrep\n, others as time permits)\n\n\ndirectory structure\n\n\nessential shell tricks to keep you from typing more than you have to (tab autocompletion and arrow keys)\n\n\ncommon bioinformatics file formats and the type of information each contains (\n.fasta\n, \n.faa\n, etc.)\n\n\n\n\nAt the end of today's lesson, students will be able to:\n\n\n\n\nssh\n to a remote server from the Terminal\n\n\ninteract with the Unix shell to extract information from text files\n\n\nexplain the computational steps taken to predict and annotate genes in a bacterial genome\n\n\nrun \nProkka\n to annotate a bacterial genome\n\n\nexecute scripts to answer specific questions about a genome annotation\n\n\n\n\nHousekeeping items\n\n\nCopy-paste:\n unless I tell you otherwise, do not copy and paste commands into the Terminal! The point of this lesson is to become familiar with typing shell commands and to learn by repetition. This is one example where strict memorization is essential, and this will only happen if you practice typing EVERY command!\n\n\nStickies:\n use green stickies to signal that you are following along with the examples successfully, and use pink stickies to signal any sort of question/confusion/problem.\n\n\nEtherpad:\n the Etherpad is an online notepad for sharing notes, questions, and answers to exercise questions. If you have a question, type it into the Etherpad chat (as well as put up your pink sticky) so that your classmates can help.\n\nPlease be careful not to delete others' notes!\n\n\nUnix shell 101\n\n\nFirst, we need to log in to the remote Amazon instance. From your Mac, open Applications --\n Utilities --\n Terminal and type\n\n\nssh student@ec2-??-??-??-??.compute1.amazonaws.com\n\n\n\nwhere \n??-??-??-??\n is the IP address of the instance you claimed in the \nEtherpad\n. Type \nyes\n to add to the list of known hosts. When prompted, enter your password: \nGen0mic$\n\n\npwd\n and \nls\n: your eyes and ears in the shell\n\n\npwd\n stands for print working directory. If you ever take a wrong turn, \npwd\n is like GPS. \nNote:\n For simplicity and to make sure this lesson covers biology and not just shell, the Amazon instances have been configured to show the current working directory before the \n$\n command prompt.\n\n\nls\n lists the contents of the current working directory, and is analogous to graphically viewing the contents of folders on your desktop. The \nls\n command commonly takes additional parameters, called \narguments\n, which modify its default behavior. Some common ones are:\n\n\n\n\n-l\n prints a long list including file attributes (size, ownership, date modified)\n\n\n-a\n prints all files, including hidden files\n\n\n-t\n sorts the list by when the file or directory was last modified\n\n\n-r\n sorts in reverse order\n\n\n-F\n denotes directories with a trailing \n/\n\n\n\n\nIn the Unix shell, you can pass multiple arguments together. For example\n\n\nls -lrt\n\n\n\nwill generate a long list sorted by time, with the most recent file listed last. This command is useful in situations where you want to verify that a file you expect was actually created or modified.\n\n\nTab autocompletion\n\n\nThe Unix shell knows we're all lazy and hate typing, so we can press the Tab key whenever we need to automatically fill in the rest of a long file name. Try it! Type\n\n\nD \nTab\n\nD \nTab\nTab\n\n\n\n\nReally, the reason tab autocompletion exists is to reduce or eliminate typing errors because, at least in this respect, computers are smarter than humans.\n\n\ncd\n: moving around in the shell\n\n\ncd\n stands for change directory. Tab autocompletion is your biggest friend with this command! Some examples:\n\n\ncd Dbiwa_annotation\n\n\n\nchanges into the \nDbiwa_annotation\n directory.\n\n\ncd ..\n\n\n\nmoves up one directory. In Unix, \n..\n always means up one directory\n\n\nTo get back to your \nhome\n directory (on these instances, this means \n/home/student\n), you can type any of the following. Since this is such a common task, several redundancies are built in:\n\n\ncd\ncd ~\ncd $HOME\n\n\n\nAll of these commands will take you back to the home directory.\n\n\nless\n and \ngrep\n: viewing and collecting information from text files\n\n\nless\n allows you to view and scroll through files without opening them. Let's use \nless\n to take a peek inside one of the genomes we'll be annotating. Remember to always tab-autocomplete!\n\n\nless Desulfuromonas_soudanensis_WTL.fasta\n\n\n\nWe can navigate through the file with different shortcut keys. The most commonly used are\n\n\n\n\nspace bar\n - page down\n\n\nb\n - page up\n\n\nG\n - go to end of file (useful for checking file integrity in certain situations)\n\n\n\n\nLike \nls\n, \nless\n can take arguments as well. Two useful ones are:\n\n\n\n\n-S\n - do not wrap long lines (useful when a file contains lines that are longer than will fit in your Terminal window)\n\n\n-N\n - print line numbers (useful if you want to slice a file up to a certain line)\n\n\n\n\ngrep\n (global regular expression print) looks for lines in a file that contain a match  to a particular search pattern (case sensitive), and prints the entire line to the screen. For example\n\n\ngrep 'hypothetical' hgcAB.faa\n\n\n\nwill print any lines in \nhgcAB.faa\n that contain the search term 'hypothetical'. \ngrep\n also takes some helpful arguments:\n\n\n\n\n-c\n print only a count of the number of matches\n\n\n-v\n invert match, i.e. print lines that do NOT contain the search term\n\n\n-i\n ignore case\n\n\n\n\nA common task in bioinformatics is to count the number of sequences in a \nFASTA\n file. In this file format, each sequence begins with a header preceded by a caret \n. So, a \ngrep\n command to count sequences would be\n\n\ngrep -c '\n' some_file.fasta\n\n\n\nNote that a FASTA file can contain either nucleic acid or protein sequence.\n\n\nYour first genome annotation\n\n\nNow we're ready to set up our first annotation. Remember to tab-autocomplete whenever possible to eliminate typing errors and to confirm that the computer is doing what you think it should be. For odd-numbered groups:\n\n\nannotate -g Desulfuromonas_soudanensis_WTL.fasta\n\n\n\nFor even-numbered groups:\n\n\nannotate -g Desulfuromonas_biwabikus_DDH964.fasta\n\n\n\nViewing the annotation\n\n\nOnce the annotation completes (how long do you think it will take?), use your Unix shell skills to move into the annotation directory and familiarize yourself with the different output files. \n\n\ncd Dsoud_annotation\n\n\n\nor\n\n\ncd Dbiwab_annotation\n\n\n\nUse \nls\n to list the files and \nless\n to take a peek at a few of the output files. What kind of information does each file contain? \n\n\nExercises\n\n\nPost your results to the Etherpad as you answer these questions.\n Be sure to specify which genome you are working with.\n\n\n\n\n1.\n   Just like when you collect data at the bench, a good rule of thumb is to never trust your bioinformatics software until you exhaustively reproduce and verify the results. How can we be sure that the annotation we generated isn't full of mistakes? One way we can ensure that annotation errors are not propagated onto new genomes is to use a set of trusted protein sequences from a closely related organism. We will tell the \nannotate\n command to use the \n-p\n option and then specify a file of proteins. Type the following (for odd-numbered groups):\n\n\ncd\nannotate -g Desulfuromonas_soudanensis_WTL.fasta -p trusted_proteins.faa \n\n\n\n\nFor even-numbered groups:\n\n\ncd\nannotate -g Desulfuromonas_biwabikus_DDH964.fasta -p trusted_proteins.faa \n\n\n\n\nThe trailing \n tells the computer to run the command in the background, so that you can answer the following questions. \n\n\n2.\n   Use \ngrep\n to count the number of a) proteins, b) tRNAs, and c) rRNAs and d) ATP synthases in your genome. Do these numbers make sense? Do they agree with the values in the \nDsoud.txt\n or \nDbiwa.txt\n files?\n\n\n3.\n   Find the gene locus tag(s) (e.g. DSOUD_1234, DBIWA_1234) corresponding to the following:\n\n\n\n\ntRNA charged with cysteine\n\n\nsigma factor RpoN\n\n\nthe F subunit of NADH dehydrogenase\n\n\n\n\n4.\n   A hallmark of bacteria that respire extracellular metals is an abundance of multiheme \nc\n-type cytochromes, redox proteins that efficiently move electrons around. Use the following Python scripts to collect information about the putative \nc\n-type cytochromes in your genome (Tab-autocomplete whenever possible!). For this, you want the \n.gbk\n (Genbank) file:\n\n\ncd\ncd Dsoud_annotation\nget_multiheme_cytochromes Dsoud.gbk\ncytochrome_stats.py Dsoud.gbk\n\n\n\nHow many cytochromes are there? Use \nls\n and \nless\n to find the locus tag of the largest cytochrome in terms of a) molecular weight and b) number of heme-binding motifs.\n\n\n5.\n  By now, your second genome annotation from Question 1 should be complete. What arguments can you pass to \nls\n to look for a recently generated directory containing the new results?\n\n\nLet's compare the two annotations:\n\n\ncd\ngrep -c '\n' *annotation/*.faa\n\n\n\nIn Unix, * means wild card, and the shell will match anything that can autoexpand to fill the wild card.  The above command allows us to count the number of protein sequences in both annotations simultaneously.\n\n\nWrite another \ngrep\n command to count the number of hypothetical proteins in both annotations. Is there a difference? Why or why not? Write your answers to the Etherpad.\n\n\nBonus exercises\n\n\nB1.\n One of the first things we look for in new genomes is evidence for conserved protein sequences. In this group of Deltaproteobacteria, genes for mercury methylation (\nhgcAB\n) are common (for further reading, see links to papers below). Methylmercury is more toxic than mercury because the methyl group makes it lipophilic, and so methylmercury bioaccumulates as it moves up aquatic food chains. Do a \ngrep\n search - do you see any evidence for mercury methylation genes? Be creative with your search terms, and remember that \nabsence of evidence is not evidence of absence.\n\n\nA more robust approach is to look at the amino acid sequences themselves and search for homologous proteins. The tool for this is called BLAST (Basic Local Alignment Search Tool). To use BLAST, we first need to make a database of our annotated proteins (modify as necessary if you are in an even-numbered group). Remember, always tab-autocomplete!\n\n\ncd\nmakeblastdb -in Dsoud_annotation/Dsoud.faa -out Dsoud_blastdb -dbtype prot\n\n\n\nThen, run BLAST using the file of HgcAB protein sequences provided:\n\n\nblastp -query hgcAB.faa -db Dsoud_blastdb -out blastp_results.txt\n\n\n\nExamine the output file. Does your genome contain genes encoding \nHgcAB\n homologs? If so, write their locus tags to the Etherpad.\n\n\nB2.\n  The \n.gff\n (general feature format) file contains information about whether a gene is on the plus or minus strand. Using your Unix cheat sheet, write a command to count the number of genes on each DNA strand.  \nHint:\n use the Unix pipe \n|\n to take the output from one command and redirect it into another. How can you avoid incorrectly counting lines that have a \n+\n or \n-\n in the protein name?\n\n\nFAQ\n\n\nWhy are we connecting to a remote computer? Can't we use the computer we have?\n\nIn theory, yes. But there are a few key reasons why we're using remote computers:\n\n\n\n\nProkka (the genome annotation tool we are using) requires several additional tools already be installed (called \ndependencies\n), and it is not trivial to install them\n\n\nReproducibility: I created a \"snapshot\" (called an Amazon Machine Instance, or AMI) of a computer with Prokka and its dependencies already installed. Therefore each student is using the same software in the same computing environment, which guarantees that everyone's results will be reproducible.\n\n\nYou can't break a remote machine. Even if something goes horribly wrong, you can be back up to speed in minutes by simply re-launching another Amazon instance.\n\n\n\n\nWhat do I do if I get a \nbroken pipe\n error message?\n\nThis happens occasionally when the network connection between your local computer and the remote server is lost. To reconnect to the remote instance, in the Mac Terminal, press the up arrow key to re-run the last \nssh student@ec2...\n command.\n\n\nWhere did the genomes come from?\n The two \nDesulfuromonas\n genomes used in today's lesson were sequenced by Jon and came from a half mile underground in the \nSoudan Iron Mine\n. Both organisms make a living by respiring extracellular metals instead of oxygen.\n\n\nPapers related to today's lab\n\n\n\n\nSeemann T. 2014. Prokka: rapid prokaryotic genome annotation. \nBioinformatics\n \n11\n:119.\n\n\nHyatt D et al. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. \nBMC Bioinformatics\n \n30\n:2068-2069.\n\n\nParks JM et al. 2013. The genetic basis for bacterial mercury methylation. \nScience\n \n339\n:1332\u20131335.\n\n\nPodar M et al. 2015. Global prevalence and distribution of genes and microorganisms involved in mercury methylation. \nScience Advances\n \n1\n:e1500675\u2013e1500675.\n\n\n\n\nLink to PDF files\n\n\nOther links\n\n\n\n\nUnix shell cheat sheet handout\n\n\nEvolution of DNA Sequencing\n - seminar by Jonathan Eisen\n\n\n\n\nAbout\n\n\nThis lesson was created by Jon Badalamenti (\nemail\n jonb [at] umn [dot] edu \\| \ntwitter\n @jbadomics), University of Minnesota, October 2015.", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "In this lesson you will connect to an  Amazon EC2  cloud computing instance to annotate a bacterial genome, and then mine the annotation to learn interesting things about the biology of the organism. You will work with a partner, but each student will use his/her own remote computer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#learning-objectives", 
            "text": "At the end of today's lesson, students will understand:   foundational Unix shell commands ( ls ,  pwd ,  less ,  grep , others as time permits)  directory structure  essential shell tricks to keep you from typing more than you have to (tab autocompletion and arrow keys)  common bioinformatics file formats and the type of information each contains ( .fasta ,  .faa , etc.)   At the end of today's lesson, students will be able to:   ssh  to a remote server from the Terminal  interact with the Unix shell to extract information from text files  explain the computational steps taken to predict and annotate genes in a bacterial genome  run  Prokka  to annotate a bacterial genome  execute scripts to answer specific questions about a genome annotation", 
            "title": "Learning objectives"
        }, 
        {
            "location": "/#housekeeping-items", 
            "text": "Copy-paste:  unless I tell you otherwise, do not copy and paste commands into the Terminal! The point of this lesson is to become familiar with typing shell commands and to learn by repetition. This is one example where strict memorization is essential, and this will only happen if you practice typing EVERY command!  Stickies:  use green stickies to signal that you are following along with the examples successfully, and use pink stickies to signal any sort of question/confusion/problem.  Etherpad:  the Etherpad is an online notepad for sharing notes, questions, and answers to exercise questions. If you have a question, type it into the Etherpad chat (as well as put up your pink sticky) so that your classmates can help. Please be careful not to delete others' notes!", 
            "title": "Housekeeping items"
        }, 
        {
            "location": "/#unix-shell-101", 
            "text": "First, we need to log in to the remote Amazon instance. From your Mac, open Applications --  Utilities --  Terminal and type  ssh student@ec2-??-??-??-??.compute1.amazonaws.com  where  ??-??-??-??  is the IP address of the instance you claimed in the  Etherpad . Type  yes  to add to the list of known hosts. When prompted, enter your password:  Gen0mic$", 
            "title": "Unix shell 101"
        }, 
        {
            "location": "/#pwd-and-ls-your-eyes-and-ears-in-the-shell", 
            "text": "pwd  stands for print working directory. If you ever take a wrong turn,  pwd  is like GPS.  Note:  For simplicity and to make sure this lesson covers biology and not just shell, the Amazon instances have been configured to show the current working directory before the  $  command prompt.  ls  lists the contents of the current working directory, and is analogous to graphically viewing the contents of folders on your desktop. The  ls  command commonly takes additional parameters, called  arguments , which modify its default behavior. Some common ones are:   -l  prints a long list including file attributes (size, ownership, date modified)  -a  prints all files, including hidden files  -t  sorts the list by when the file or directory was last modified  -r  sorts in reverse order  -F  denotes directories with a trailing  /   In the Unix shell, you can pass multiple arguments together. For example  ls -lrt  will generate a long list sorted by time, with the most recent file listed last. This command is useful in situations where you want to verify that a file you expect was actually created or modified.", 
            "title": "pwd and ls: your eyes and ears in the shell"
        }, 
        {
            "location": "/#tab-autocompletion", 
            "text": "The Unix shell knows we're all lazy and hate typing, so we can press the Tab key whenever we need to automatically fill in the rest of a long file name. Try it! Type  D  Tab \nD  Tab Tab   Really, the reason tab autocompletion exists is to reduce or eliminate typing errors because, at least in this respect, computers are smarter than humans.", 
            "title": "Tab autocompletion"
        }, 
        {
            "location": "/#cd-moving-around-in-the-shell", 
            "text": "cd  stands for change directory. Tab autocompletion is your biggest friend with this command! Some examples:  cd Dbiwa_annotation  changes into the  Dbiwa_annotation  directory.  cd ..  moves up one directory. In Unix,  ..  always means up one directory  To get back to your  home  directory (on these instances, this means  /home/student ), you can type any of the following. Since this is such a common task, several redundancies are built in:  cd\ncd ~\ncd $HOME  All of these commands will take you back to the home directory.", 
            "title": "cd: moving around in the shell"
        }, 
        {
            "location": "/#less-and-grep-viewing-and-collecting-information-from-text-files", 
            "text": "less  allows you to view and scroll through files without opening them. Let's use  less  to take a peek inside one of the genomes we'll be annotating. Remember to always tab-autocomplete!  less Desulfuromonas_soudanensis_WTL.fasta  We can navigate through the file with different shortcut keys. The most commonly used are   space bar  - page down  b  - page up  G  - go to end of file (useful for checking file integrity in certain situations)   Like  ls ,  less  can take arguments as well. Two useful ones are:   -S  - do not wrap long lines (useful when a file contains lines that are longer than will fit in your Terminal window)  -N  - print line numbers (useful if you want to slice a file up to a certain line)   grep  (global regular expression print) looks for lines in a file that contain a match  to a particular search pattern (case sensitive), and prints the entire line to the screen. For example  grep 'hypothetical' hgcAB.faa  will print any lines in  hgcAB.faa  that contain the search term 'hypothetical'.  grep  also takes some helpful arguments:   -c  print only a count of the number of matches  -v  invert match, i.e. print lines that do NOT contain the search term  -i  ignore case   A common task in bioinformatics is to count the number of sequences in a  FASTA  file. In this file format, each sequence begins with a header preceded by a caret  . So, a  grep  command to count sequences would be  grep -c ' ' some_file.fasta  Note that a FASTA file can contain either nucleic acid or protein sequence.", 
            "title": "less and grep: viewing and collecting information from text files"
        }, 
        {
            "location": "/#your-first-genome-annotation", 
            "text": "Now we're ready to set up our first annotation. Remember to tab-autocomplete whenever possible to eliminate typing errors and to confirm that the computer is doing what you think it should be. For odd-numbered groups:  annotate -g Desulfuromonas_soudanensis_WTL.fasta  For even-numbered groups:  annotate -g Desulfuromonas_biwabikus_DDH964.fasta", 
            "title": "Your first genome annotation"
        }, 
        {
            "location": "/#viewing-the-annotation", 
            "text": "Once the annotation completes (how long do you think it will take?), use your Unix shell skills to move into the annotation directory and familiarize yourself with the different output files.   cd Dsoud_annotation  or  cd Dbiwab_annotation  Use  ls  to list the files and  less  to take a peek at a few of the output files. What kind of information does each file contain?", 
            "title": "Viewing the annotation"
        }, 
        {
            "location": "/#exercises", 
            "text": "Post your results to the Etherpad as you answer these questions.  Be sure to specify which genome you are working with.   1.    Just like when you collect data at the bench, a good rule of thumb is to never trust your bioinformatics software until you exhaustively reproduce and verify the results. How can we be sure that the annotation we generated isn't full of mistakes? One way we can ensure that annotation errors are not propagated onto new genomes is to use a set of trusted protein sequences from a closely related organism. We will tell the  annotate  command to use the  -p  option and then specify a file of proteins. Type the following (for odd-numbered groups):  cd\nannotate -g Desulfuromonas_soudanensis_WTL.fasta -p trusted_proteins.faa    For even-numbered groups:  cd\nannotate -g Desulfuromonas_biwabikus_DDH964.fasta -p trusted_proteins.faa    The trailing   tells the computer to run the command in the background, so that you can answer the following questions.   2.    Use  grep  to count the number of a) proteins, b) tRNAs, and c) rRNAs and d) ATP synthases in your genome. Do these numbers make sense? Do they agree with the values in the  Dsoud.txt  or  Dbiwa.txt  files?  3.    Find the gene locus tag(s) (e.g. DSOUD_1234, DBIWA_1234) corresponding to the following:   tRNA charged with cysteine  sigma factor RpoN  the F subunit of NADH dehydrogenase   4.    A hallmark of bacteria that respire extracellular metals is an abundance of multiheme  c -type cytochromes, redox proteins that efficiently move electrons around. Use the following Python scripts to collect information about the putative  c -type cytochromes in your genome (Tab-autocomplete whenever possible!). For this, you want the  .gbk  (Genbank) file:  cd\ncd Dsoud_annotation\nget_multiheme_cytochromes Dsoud.gbk\ncytochrome_stats.py Dsoud.gbk  How many cytochromes are there? Use  ls  and  less  to find the locus tag of the largest cytochrome in terms of a) molecular weight and b) number of heme-binding motifs.  5.   By now, your second genome annotation from Question 1 should be complete. What arguments can you pass to  ls  to look for a recently generated directory containing the new results?  Let's compare the two annotations:  cd\ngrep -c ' ' *annotation/*.faa  In Unix, * means wild card, and the shell will match anything that can autoexpand to fill the wild card.  The above command allows us to count the number of protein sequences in both annotations simultaneously.  Write another  grep  command to count the number of hypothetical proteins in both annotations. Is there a difference? Why or why not? Write your answers to the Etherpad.", 
            "title": "Exercises"
        }, 
        {
            "location": "/#bonus-exercises", 
            "text": "B1.  One of the first things we look for in new genomes is evidence for conserved protein sequences. In this group of Deltaproteobacteria, genes for mercury methylation ( hgcAB ) are common (for further reading, see links to papers below). Methylmercury is more toxic than mercury because the methyl group makes it lipophilic, and so methylmercury bioaccumulates as it moves up aquatic food chains. Do a  grep  search - do you see any evidence for mercury methylation genes? Be creative with your search terms, and remember that  absence of evidence is not evidence of absence.  A more robust approach is to look at the amino acid sequences themselves and search for homologous proteins. The tool for this is called BLAST (Basic Local Alignment Search Tool). To use BLAST, we first need to make a database of our annotated proteins (modify as necessary if you are in an even-numbered group). Remember, always tab-autocomplete!  cd\nmakeblastdb -in Dsoud_annotation/Dsoud.faa -out Dsoud_blastdb -dbtype prot  Then, run BLAST using the file of HgcAB protein sequences provided:  blastp -query hgcAB.faa -db Dsoud_blastdb -out blastp_results.txt  Examine the output file. Does your genome contain genes encoding  HgcAB  homologs? If so, write their locus tags to the Etherpad.  B2.   The  .gff  (general feature format) file contains information about whether a gene is on the plus or minus strand. Using your Unix cheat sheet, write a command to count the number of genes on each DNA strand.   Hint:  use the Unix pipe  |  to take the output from one command and redirect it into another. How can you avoid incorrectly counting lines that have a  +  or  -  in the protein name?", 
            "title": "Bonus exercises"
        }, 
        {
            "location": "/#faq", 
            "text": "Why are we connecting to a remote computer? Can't we use the computer we have? \nIn theory, yes. But there are a few key reasons why we're using remote computers:   Prokka (the genome annotation tool we are using) requires several additional tools already be installed (called  dependencies ), and it is not trivial to install them  Reproducibility: I created a \"snapshot\" (called an Amazon Machine Instance, or AMI) of a computer with Prokka and its dependencies already installed. Therefore each student is using the same software in the same computing environment, which guarantees that everyone's results will be reproducible.  You can't break a remote machine. Even if something goes horribly wrong, you can be back up to speed in minutes by simply re-launching another Amazon instance.   What do I do if I get a  broken pipe  error message? \nThis happens occasionally when the network connection between your local computer and the remote server is lost. To reconnect to the remote instance, in the Mac Terminal, press the up arrow key to re-run the last  ssh student@ec2...  command.  Where did the genomes come from?  The two  Desulfuromonas  genomes used in today's lesson were sequenced by Jon and came from a half mile underground in the  Soudan Iron Mine . Both organisms make a living by respiring extracellular metals instead of oxygen.", 
            "title": "FAQ"
        }, 
        {
            "location": "/#papers-related-to-todays-lab", 
            "text": "Seemann T. 2014. Prokka: rapid prokaryotic genome annotation.  Bioinformatics   11 :119.  Hyatt D et al. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification.  BMC Bioinformatics   30 :2068-2069.  Parks JM et al. 2013. The genetic basis for bacterial mercury methylation.  Science   339 :1332\u20131335.  Podar M et al. 2015. Global prevalence and distribution of genes and microorganisms involved in mercury methylation.  Science Advances   1 :e1500675\u2013e1500675.   Link to PDF files", 
            "title": "Papers related to today's lab"
        }, 
        {
            "location": "/#other-links", 
            "text": "Unix shell cheat sheet handout  Evolution of DNA Sequencing  - seminar by Jonathan Eisen", 
            "title": "Other links"
        }, 
        {
            "location": "/#about", 
            "text": "This lesson was created by Jon Badalamenti ( email  jonb [at] umn [dot] edu \\|  twitter  @jbadomics), University of Minnesota, October 2015.", 
            "title": "About"
        }
    ]
}